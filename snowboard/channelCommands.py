# This file is part of snowboard.
#
# snowboard is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# snowboard is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with snowboard.  If not, see <http://www.gnu.org/licenses/>.

'''
Processes commands relating directly to managing a channel the bot resides on.
This also processes general commands that originate from a channel.

See https://github.com/dwhagar/snowboard/wiki/Class-Docs for documentation.
'''

import urllib.parse
import urllib.request
import urllib.error
import json
import random
from os.path import isfile
from . import basicMessages
from . import debug

def channelTriggers(ircMsg):
    '''
    Processes bot commands that originate form a channel.

    Triggers:
        ^opme:
            Instructs the bot to give privileges to a user on the channel.
        ^reset:
            Resets a channel topic back to the default topic.
            ** In the future this command will also reset channel modes.
        ^desc:
            Returns a description of the channel from which the command
            originates, used primarily (but not limited to) IC channels.
        ^rules:
            Gives a list of the channel rules via NOTICE.  Note that the rules
            are global rules, stored in help/rules.txt
        ^chans:
            Gives a list of the channels associated with the bot, this list is
            not generated by the bot itself and is stored in help/chans.txt
            so that the bot admin can have channels managed with are not given
            to everyone.
        ^w place:
            Gives the weather for a specific place.  The place argument can be
            city name, zip code, postal code, or weather station ID.  Uses the
            Yahoo! Weather API.
        ^button nick:
            Has the bot do something to someone.  Given the nick argument
            (which is not matched to a nick in the channel), it will pull
            text from button.txt which can be edited.
        ^help:
            Displays a list of channel related commands via NOTICE.
        ^announcement:
            Displays the channel announcement via NOTICE.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []

    if ircMsg.dataList[0].lower() == "^opme":
        commands = __opmeCommand(ircMsg)
    elif ircMsg.dataList[0].lower() == "^reset":
        commands = __resetTopic(ircMsg)
    elif ircMsg.dataList[0].lower() == "^desc":
        commands = __showDesc(ircMsg)
    elif ircMsg.dataList[0].lower() == "^rules":
        commands = __showRules(ircMsg)
    elif ircMsg.dataList[0].lower() == "^chans":
        commands = __showChans(ircMsg)
    elif ircMsg.dataList[0].lower() == "^w":
        commands = __showWeather(ircMsg)
    elif ircMsg.dataList[0].lower() == "^button":
        commands = __buttonPress(ircMsg)
    elif ircMsg.dataList[0].lower() == "^help":
        commands = __chanHelp(ircMsg)
    elif ircMsg.dataList[0].lower() == "^announcement":
        commands = __announce(ircMsg)

    return commands

def joinTriggers(ircMsg):
    '''
    Processes things to do when someone joins a channel.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []

    # TODO: Move the check to see if the join comes from the bot itself joining into here.

    commands += __announce(ircMsg)

    return commands

def msgTriggers(ircMsg):
    '''
    Processes message triggers for channel functions.

    Triggers:
        modchan channel command data:
            The command to modify a channel's settings in the database.
            channel:
                The channel to modify, must be a channel the bot is on.
            command:
                The modification that is being done.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []

    if ircMsg.dataList[0] == "modchan":
        commands = __modChannel(ircMsg)

    return commands

def resetTopics(net):
    '''
    Resets all channel topics to default.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []

    for chan in net.channels:
        if (not chan.defaultTopic == "") and chan.opped:
            if (not chan.topic == chan.defaultTopic) and chan.checkFlag("keeptopic"):
                commands.append("TOPIC " + chan.name + " :" + chan.defaultTopic)

    return commands

def __announce(ircMsg):
    '''
    Sends the channel's announcement to the nick that joins or requests it via
    a NOTICE command.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []

    chan = ircMsg.net.findChannel(ircMsg.dest)

    if not chan is None:
        if (not (chan.botnick.lower() == ircMsg.src.lower())) and (not (chan.announce == "")):
            commands.append("NOTICE " + ircMsg.src + " :" + chan.announce)

    return commands

def __buttonPress(ircMsg):
    '''
    Does something random to a person specified or the nick that requested it
    pulling the text for the action from the file button.txt replacing the
    text ::source:: and ::target:: with the source nick and the nick text from
    the command.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []

    nick = ircMsg.net.findNick(ircMsg.src)
    chan = ircMsg.net.findChannel(ircMsg.dest)
    chanNick = chan.findNick(nick)

    if (len(ircMsg.dataList) > 1) and (not chan.checkFlag("ic")):
        if ircMsg.dataList[1].lower() == "on":
            if chanNick[1].op:
                chan.removeFlag("nobutton")
                commands.append("PRIVMSG " + ircMsg.dest + " :The button is now turned on.")
            else:
                commands.append("PRIVMSG " + ircMsg.dest + " :You do not have ops in this channel.")
        elif ircMsg.dataList[1].lower() == "off":
            if chanNick[1].op:
                chan.addFlag("nobutton")
                commands.append("PRIVMSG " + ircMsg.dest + " :The button is now turned off.")
            else:
                commands.append("PRIVMSG " + ircMsg.dest + " :You do not have ops in this channel.")
        elif not chan.checkFlag("nobutton"):
            target = " ".join(ircMsg.dataList[1:])
            source = ircMsg.src
            fileName = "button.txt"
            lines = []

            if (not target.lower() == source.lower()) and (not target.lower() == ircMsg.net.botnick.lower()):
                if isfile(fileName):
                    file = open(fileName)
                    data = file.readlines()

                    for message in data:
                        message = message.strip('/r')
                        message = message.strip('/n')

                        if not (message == ""):
                            lines.append(message)

                    file.close()

                    random.seed()
                    choice = random.choice(lines)

                    choice = choice.replace("::source::", source)
                    choice = choice.replace("::target::", target)

                    commands.append("PRIVMSG " + ircMsg.dest + " :" + choice)
                else:
                    debug.error("Could not send file " + fileName + ", the file was not found.")
                    commands.append(
                        "PRIVMSG " + ircMsg.dest + " :That information could not be located.  Please contact the bot admin.")
            else:
                commands.append("PRIVMSG " + ircMsg.dest + " :Don't ask me to do that, it's just not right.")
    else:
        commands.append("PRIVMSG " + ircMsg.dest + " :You should really tell me whose button you want me to push.")
    return commands

def __chanHelp(ircMsg):
    '''
    Sends the channels help documentation to a user.  Commands are contained
    in the file help/channel-help.txt.

    Flags:
        nohelp:
            Do not display help in a channel where this flag is set.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    chan = ircMsg.net.findChannel(ircMsg.dest)

    commands = []
    cmd = "^help"

    if not chan.checkFlag("nohelp"):
        ircMsg.net.sendFile("help/channel-help.txt", "NOTICE", ircMsg.src)
    else:
        commands += basicMessages.cmdDisabled(ircMsg.src, cmd, ircMsg.dest)

    return commands

def __modChannel(ircMsg):
    '''
    Commands to change channel properties.

    Commands for modchan:
        addflags:
            Adds flags to a channel.
        announce:
            Displays the channel's on join announcement.
        delflags:
            Removes flags from a channel.
        desc:
            Sets the channel description.
        flags:
            Displays a channels flags.
        setannounce:
            Sets the channel's on join announcement.
        settopic:
            Sets the channel's default topic.
        setdesc:
            Sets the channel's description.
        setflags:
            Sets the channel's flags, overwriting any that exist.
        topic:
            Displays the channel's default topic.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []
    thisCmd = "modchan"

    nick = ircMsg.net.findNick(ircMsg.src)

    if len(ircMsg.dataList) >= 3:
        chan = ircMsg.net.findChannel(ircMsg.dataList[1])
        cmd = ircMsg.dataList[2]

        if len(ircMsg.dataList) >= 4:
            data = " ".join(ircMsg.dataList[3:])
        else:
            data = ""

        if not chan is None:
            if nick.user.checkApproved("channelmanager", chan.name):
                if cmd == "addflags":
                    data.replace(" ", "")
                    list = data.split(",")
                    if not list == []:
                        for flag in list:
                            chan.addFlag(flag)
                        debug.message("Channel flags were added to " + chan.name + " by " + ircMsg.src + ".")
                        commands.append("PRIVMSG " + ircMsg.src + " :Flags added to " + chan.name + ".")
                    else:
                        commands += basicMessages.paramFail(ircMsg.src, cmd)
                elif cmd == "announce":
                    debug.info("Channel announcement requested by " + ircMsg.src + ".")
                    if chan.announce == "":
                        commands.append("PRIVMSG " + ircMsg.src + " :Announcement for " + chan.name + " is not set.")
                    else:
                        commands.append(
                            "PRIVMSG " + ircMsg.src + " :Announcement for " + chan.name + " is '" + chan.announce + "'.")
                elif cmd == "delflags":
                    data.replace(" ", "")
                    list = data.split(",")
                    if not list == []:
                        for flag in list:
                            chan.removeFlag(flag)
                        debug.message("Channel flags were added to " + chan.name + " by " + ircMsg.src + ".")
                        commands.append("PRIVMSG " + ircMsg.src + " :Flags added to " + chan.name + ".")
                    else:
                        commands += basicMessages.paramFail(ircMsg.src, cmd)
                elif cmd == "desc":
                    debug.info("Channel description requested by " + ircMsg.src + ".")
                    if chan.desc == "":
                        commands.append("PRIVMSG " + ircMsg.src + " :Description for " + chan.name + " is not set.")
                    else:
                        commands.append(
                            "PRIVMSG " + ircMsg.src + " :Description for " + chan.name + " is '" + chan.desc + "'.")
                elif cmd == "flags":
                    debug.info("Channel flags requested by " + ircMsg.src + ".")
                    if chan.flags == []:
                        commands.append("PRIVMSG " + ircMsg.src + " :Channel " + chan.name + " has no flags set.")
                    else:
                        commands.append("PRIVMSG " + ircMsg.src + " :Channel " + chan.name + " has flags " + ",".join(
                            chan.flags) + ".")
                elif cmd == "setannounce":
                    chan.announce = data
                    chan.saveData()
                    if chan.announce == "":
                        commands.append(
                            "PRIVMSG " + ircMsg.src + " :Announcement for " + chan.name + " has been cleared.")
                    else:
                        commands.append("PRIVMSG " + ircMsg.src + " :Announcement for " + chan.name + " has been set.")
                    debug.message("Announcement for " + chan.name + " was set by " + ircMsg.src + ".")
                elif cmd == "settopic":
                    chan.defaultTopic = data
                    chan.saveData()
                    if chan.defaultTopic == "":
                        commands.append(
                            "PRIVMSG " + ircMsg.src + " :Default topic for " + chan.name + " has been cleared.")
                    else:
                        commands.append("PRIVMSG " + ircMsg.src + " :Default topic for " + chan.name + " has been set.")
                    debug.message("Default topic for " + chan.name + " was set by " + ircMsg.src + ".")
                elif cmd == "setdesc":
                    chan.desc = data
                    chan.saveData()
                    if chan.desc == "":
                        commands.append(
                            "PRIVMSG " + ircMsg.src + " :Description for " + chan.name + " has been cleared.")
                    else:
                        commands.append("PRIVMSG " + ircMsg.src + " :Description for " + chan.name + " has been set.")
                    debug.message("Channel description for " + chan.name + " was set by " + ircMsg.src + ".")
                elif cmd == "setflags":
                    data.replace(" ", "")
                    data = data.lower()
                    chan.flags = data.split(",")
                    chan.saveData()
                    if len(chan.flags) == 0:
                        commands.append("PRIVMSG " + ircMsg.src + " :Flags for " + chan.name + " have been cleared.")
                    else:
                        commands.append("PRIVMSG " + ircMsg.src + " :Flags for " + chan.name + " have been set.")
                    debug.message("Channel flags for " + chan.name + " were set by " + ircMsg.src + ".")
                elif cmd == "topic":
                    debug.info("Default topic requested by " + ircMsg.src + ".")
                    if chan.defaultTopic == "":
                        commands.append("PRIVMSG " + ircMsg.src + " :Default topic for " + chan.name + " is not set.")
                    else:
                        commands.append(
                            "PRIVMSG " + ircMsg.src + " :Default topic for " + chan.name + " is '" + chan.defaultTopic + "'.")
            else:
                commands += basicMessages.denyMessage(ircMsg.src, thisCmd)
        else:
            commands += basicMessages.noChannel(ircMsg.src, thisCmd, ircMsg.dataList[1])
    else:
        commands += basicMessages.paramFail(ircMsg.src, thisCmd)

    return commands

def __opmeCommand(ircMsg):
    '''
    Allows a user to gain privileges in a channel where the bot has ops.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []
    thisCmd = "^opme"

    nick = ircMsg.net.findNick(ircMsg.src)
    chan = ircMsg.net.findChannel(ircMsg.dest)

    if chan.opped:
        if nick.authed:
            if nick.user.checkApproved("channelmanager", ircMsg.dest) or nick.user.checkApproved("ops",
                                                                                                 ircMsg.dest) or nick.user.checkApproved(
                    "autoops", ircMsg.dest):
                commands.append("MODE " + ircMsg.dest + " +o " + ircMsg.src)
            elif nick.user.checkApproved("voice", ircMsg.dest) or nick.user.checkApproved("autovoice", ircMsg.dest):
                commands.append("MODE " + ircMsg.dest + " +v " + ircMsg.src)
            else:
                commands += basicMessages.denyMessage(ircMsg.src, thisCmd, ircMsg.dest)
        else:
            commands += basicMessages.noAuth(ircMsg.src, thisCmd, ircMsg.dest)
    else:
        commands += basicMessages.noOps(ircMsg.src, thisCmd, chan.name, ircMsg.dest)

    return commands

def __resetTopic(ircMsg):
    '''
    Resets the channel topic to default.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    # TODO:  Once able, this command should also reset channel modes to default as well.
    commands = []
    thisCmd = "^reset"

    nick = ircMsg.net.findNick(ircMsg.src)
    chan = ircMsg.net.findChannel(ircMsg.dest)

    if chan.opped:
        if nick.authed:
            if nick.user.checkApproved("channelmanager", ircMsg.dest):
                commands.append("TOPIC " + chan.name + " :" + chan.defaultTopic)
            else:
                commands += basicMessages.denyMessage(ircMsg.src, thisCmd, ircMsg.dest)
        else:
            commands += basicMessages.noAuth(ircMsg.src, thisCmd, ircMsg.dest)
    else:
        commands += basicMessages.noOps(ircMsg.src, thisCmd, chan.name, ircMsg.dest)

    return commands

def __showChans(ircMsg):
    '''
    Sends the current list managed of channels to the requesting person.
    This message is not generated by the bot, instead if is stored in the file
    help/chans.txt to allow for control over what people see and how it is
    presented.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    chan = ircMsg.net.findChannel(ircMsg.dest)

    commands = []
    cmd = "^chans"

    if not chan.checkFlag("nochans"):
        ircMsg.net.sendFile("help/chans.txt", "NOTICE", ircMsg.src)
    else:
        commands += basicMessages.cmdDisabled(ircMsg.src, cmd, ircMsg.dest)

    return commands

def __showDesc(ircMsg):
    '''
    Sends a channel description to a user.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []

    chan = ircMsg.net.findChannel(ircMsg.dest)

    if chan.desc == "":
        commands.append("NOTICE " + ircMsg.src + " :There is no description for this channel.")
    else:
        commands.append("NOTICE " + ircMsg.src + " :" + chan.desc)

    debug.info("Nick " + ircMsg.src + " requested the channel description for " + chan.name + ".")

    return commands

def __showRules(ircMsg):
    '''
    Shows rules from the help/rules.txt file.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    chan = ircMsg.net.findChannel(ircMsg.dest)

    commands = []
    cmd = "^rules"

    if not chan.checkFlag("norules"):
        ircMsg.net.sendFile("help/rules.txt", "NOTICE", ircMsg.src)
    else:
        commands += basicMessages.cmdDisabled(ircMsg.src, cmd, ircMsg.dest)

    return commands

def __showWeather(ircMsg):
    '''
    Shows the current weather by city.  This uses the Yahoo! Weather API for
    its information.  Using the API the system searched for whatever location
    is entered and accepts any input for search that Yahoo! does.

    :param ircMsg:
        ircMessage object, a message from the IRC Server.
    :return:
        commands, a list of IRC commands to be sent to the server.
    '''
    commands = []
    cmd = "^w"
    chan = ircMsg.net.findChannel(ircMsg.dest)

    if not chan.checkFlag("noweather") and len(ircMsg.dataList) > 0:
        city = " ".join(ircMsg.dataList[1:])
        yahooURL = "https://query.yahooapis.com/v1/public/yql?"
        yql = "select * from weather.forecast where woeid in (select woeid from geo.places(1) where text='{0}')".format(
            city)
        query = [('q', yql), ('format', 'json')]
        url = yahooURL + urllib.parse.urlencode(query)
        debug.message(yql)
        debug.message(url)
        try:
            response = urllib.request.urlopen(url)
        except (urllib.error.HTTPError, urllib.error.URLError) as err:
            response = err

        if response.code == 200:
            data = json.loads(response.read().decode('utf-8'))
            if not data['query']['results'] is None:
                locationData = data['query']['results']['channel']['location']
                conditionData = data['query']['results']['channel']['item']['condition']
                high = int(data['query']['results']['channel']['item']['forecast'][0]['high'])
                low = int(data['query']['results']['channel']['item']['forecast'][0]['low'])
                current = int(conditionData['temp'])
                date = data['query']['results']['channel']['lastBuildDate']
                humidity = data['query']['results']['channel']['atmosphere']['humidity']
                conditionText = "::B::" + conditionData['text'] + "::B:: and ::I::" + __tempString(
                    current) + "::I:: with a high of ::I::" + __tempString(
                    high) + "::I::, a low of ::I::" + __tempString(low) + "::I::, and " + humidity + "% humidity"
                locationText = locationData['city'] + "," + locationData['region'] + ", " + locationData['country']
                text = "In ::B::" + locationText + "::B:: the time is " + date + ".  Current conditions are " + conditionText + "."
                commands.append("PRIVMSG " + ircMsg.dest + " :" + text)
            else:
                commands.append("PRIVMSG " + ircMsg.dest + " :I could not find any information on that location.")
        else:
            errorCode = str(response.code)
            commands.append(
                "PRIVMSG " + ircMsg.dest + " :There was an problem getting information on that location, error code is '" + errorCode + "'.")
    else:
        commands += basicMessages.cmdDisabled(ircMsg.src, cmd, ircMsg.dest)
        commands += basicMessages.cmdDisabled(ircMsg.src, cmd, ircMsg.dest)

    return commands

def __tempString(temp):
    '''
    Converts a temperature in fahrenheit to a string containing both the
    the temperature in fahrenheit and that in celsius.

    :param temp:
        A numeric object capable of doing math on (Integer, float, etc...),
        containing the numeric value of temperature in fahrenheit.
    :return:
        A string object containing formatted text of temperature fahrenheit
        and celsius in the form of "?F/?C".
    '''
    f = temp
    c = round((f - 32) * 5 / 9)

    text = str(f) + "F/" + str(c) + "C"

    return text
